- Customer has {id, username, password, name}, register, login, viewItem, makeOfferForItem, makePayment, viewPaymentBalance
- Employee has {id, name, username, password, role, manager}, addItem, removeItem, acceptRejectOffer, viewPayments,
- Manager (is an Employee) createEmployee, removeEmployee, viewSalesHistory
- Item {id, name, date_added, initial_price}
- ItemStatus {Item.id, status, price, date} This table automatically updates 
	when a customer makes an offer or a payment, or when an employee adds 
	an item to the inverntory. Otherwise, an employee should make a manual update [I may have to set triggers]
- StatusValues = [added, offered, offer_rejected, offer_accepted, sold]
- Payment {id, amount, date, Item.id, balance} balance should be calculated as: 
	(ItemStatus.price where ItemStatus = "sold") - sum(Payment.amount by Item.id)}
- WeeklyPayment = Select sum(amount) as "Weekly Payment" From Payment Group By date.week
- Offer {id, customer.id, item.id, amount, date}
- SalesHistory {Item.id, Item.name, ItemStatus.status, ItemStatus.price, ItemStatus.date, Payment.id, Payment.amount, Payment.date, Payment.balance}
- System updateItemStatus, calculateWeeklyPayments


- Controllers:
	contain methods that expose instructions and options to the user on the console
	- CustomerController
		exposeLogin(), exposeRegistration(), exposeItemList(), exposeOfferOption(), exposePaymentOption()
	- EmployeeController
		exposeEmployeeLogin(), exposeOfferManagement(), exposePaymentManagement()
	- ManagerController
		exposeEmployeeManagement(), exposeSalesManagement()

- Services:
	contain methods that process user interaction data
	- CustomerService
		rigister(), customerLogin(), viewItems(), makeOffer(), makePayment()
	- EmployeeService
		employeeLogin(), addItem(), removeItem(), approveOffer(), viewPayments()
	- ManagerService
		addEmployee(), removeEmployee(), viewSalesHistory()

FrontContrloller
	Entry with welcome message and general menu
	Redirects customers to Customer Login or registration page
	Redirects employees to Employee login page
CustomerLoginController
	Login page
	On success redirect to Customer Service
	On failure invites registration
RegistrationController
	On success bypasses login and redirects to Customer Service
EmployeeLoginController
	On success redirects Employees to General Employee or Manager Services	
