Tuesday
Database
	- Collection of related data
	- allows for the preservation of data past the lifetime of an application

DBMS
	- Database management systems
		- collection of programs used to create and maintain databases
			- store data in a structured format
			- allows for concurrent use of data
			- control who has access to the data
			- maintain data integrity (consistency and accuracy of the data)
			- data back up and recovery
	- RDBMS
		- Relational Database Management Systems
			- consists of a collection of tables where tables are connected and reference each other
				- Table
					- Columns: Category of data - fields
					- Rows: Particular instance of data category - records (data entities)

SQL
	- Structured Query Language
		- provides a way to interact with data entities
	- SQL implementations
		- different "flavors" of SQL, arising from different vendors and platforms available
			- ie: OracleSQL, MySQL, NoSQL
			- syntax may vary based on the implementation
				- we'll be using PostgreSQL

Important distinction
	- PostgreSQL is RDBMS
	- DBeaver is a tool to easily visualize and interact with database entities

Database schema
	- collection of data objects including tables, views, triggers, functions
	- always belongs to one database
		- a database may have multiple schema

PostgreSQL
	- free and open source
	- Datatypes - https://www.postgresql.org/docs/10/datatype.html
		- Character types
			- CHAR
				- fixed-length, blank padded
			- VARCHAR
				- variable-length, with a limit
			- TEXT
				- variable-length with no limit
		- Numeric types
			- INTEGER
			- DECIMAL
				- for floating point, user specified
		- Temporal types
			- DATE
				- just date, no time
			- TIME
				- just time, no date
			- TIMESTAMP
				- date and time
		- Autoincrementing integer
			- SERIAL

SQL Sublanguages
	- refer to the different types of operations to be performed on database entities
	- for the sake of this training, there will be 5 SQL sublanguages
		- DDL, DCL, DML, DQL, TCL
			- DCL - Data Control Language
				- Manage user permissions within a database
					- define power/access to tables/schema to users
				- GRANT and REVOKE
			- DDL - Data Definition Language
				- Statements that are used to construct/modify/delete  database/scheme/user/tables/properties (Database entities)
					- CREATE
					- ALTER
					- DROP
					- TRUNCATE
						- unlike DROP, just removes records from a database
Constraints
	- limit the type of data entered in tables to ensure accuracy and reliability of the data
		- primary key, combination of not null and unique
		- not null, column cannot have a null value
		- unique, column's value needs to be unique
		- check(condition)
			- ensures that a condition is met
		- references
			- foreign key relationship
				 -identifies another record/row potentially in a different table

Keys
	- primary keys
		- column or a combination of columns which acts as a unique identifier to a record in a table
			- composite keys
				- combinations of columns which act as the primary key
	- foreign keys
		- used to illustrate relations between records
	- candidate keys
		- any columns that can be used to uniquely identify a record in a table

Multiplicity
	- refers to relationships between tables
		- one-to-one
			- exactly one row references another row
			- ie: one SNN per individual
		- one-to-many/many-to-one
			- exactly one row in a table is referenced by potentially many rows in another table
			- ie: one employee has many task but each task can have only one employee
		- many-to-many
			- several rows in one table can reference several rows in another table
			- ie: a task may have many employees and an employee may have many tasks
			- junction table
				- used to work with many-to-many relationships

Domain integrity
	- values must fall within the constraints placed on the columns
	- make sure that the values are "correct"

Referential integrity
	- want the database to be working properly within the constraints of a foreign key relationship
	- don't want records to reference another record that does not exist
		- orphaned records
	- delete on cascade to remove references as well

DML
	- Data Manipulation Language
	- statements to perform record level operations
		- to interact with the records stored in tables
	- CRUD 
		- Create/Read/Update/Delete
	- INSERT
		- create operation
		- insert into [table_name]([col1_name], [col2_name]...) values ([col1_value], [col2_value]...); 
			- mockaroo to generate mock-data
				- https://www.mockaroo.com/
	- UPDATE
		- update [table_name] set [col1_name] = [col1_value] where [condition]; 
			- if no where clause is specified, it will update every record in the table
	
	- DELETE
		- delete from [table_name] here [condition]; 
			- if no where clause is specified, it will delete every record in the table

DQL
	- Data Query Language
		- "sub-sub" language/ part of DML
	- Statements used to retrieve information from tables
	- SELECT
		- main operation when querying data that can be filtered using additional clauses
		- Result set can be filtered using: (order matters)
			- where
			- group by
			- having 
			- order by
			- limit

Wednesday
JDBC
	- Java Database Connectivity
		- establish a connection between a Java application and a database
			- dependency is database specific
	- Important JDBC classes/interfaces
		- DriverManager (C)
			- manage the JDBC driver
			- .getConnection()
				- provide a connection to the db
					- hardcoded (bad practice)
					- property file (prevent from pushing to GitHub using .gitignore)
					- environment variables
		- Connection (I)
			- represents the connection to the database
			- .setAutoCommit(boolean)
			- createStatement()/PreparedStatement()
			- commit()/rollback()
			- close()
		- Statement (I)
			- represents a SQL statement
			- .executeQuery(sql)
			- vulnerable to SQL injection
				- best used when no user input is required
		- PreparedStatement (I)
			- represents a SQL statement
				- that has been pre-processed and therefore prevents SQL injections
			- have to setFields for user inputs
		- ResultSet
			- result of a Query
	- SQL Injection
		- placing malicious code into a sql statement
			- ie: "select * from employees where = [userInput];
				- input could be "0; drop table employees;"
			

Joins
	- way to combine rows from different tables based on some logical relationship (columns)
		- inner join/join: return all the records that have matching values in both tables
		- left (outer) join: return all records from the left table and matched records from the right table
		- right (outer) join: return all records from the right table and matched records from the left table
		- full (outer) join: return all records when there is a match in either left or right table

Thursday

Scalar and aggregate functions
	- scalar functions
		- used on a single input to retrieve a single output
		- length, upper, lower, round...
	- aggregate functions
		- used on a group of inputs to retrieve a single output
		- count, avg, sum, max, min
		- GROUP BY
			- used with aggregate functions
			- select [col1], [aggregateFunction]([col2]) from [table_name] group by [col1];
		- HAVING
			- used with aggregate function for more specificity
			- select [col1], [aggregateFunction]([col2]) from [table_name] group by [col1]
				having [col2] > [x];

Normalization
	- refers to a database design technique that reduces redundancy and ensures that data is stored logically
	- consists in dividing larger tables into smaller tables and linking them using relationships
		- we're focus on the first 3 NFs (normal forms)
			- most databases are considered to be sufficiently normalized after 3 NFs
		- 1 NF
			- each table needs to have a primary key
			- tables need to be comprised of atomic values
				- values that cannot be broken down into smaller pieces
			- no repeated columns (or columns for the same purpose)
				- ie: color 1, color 2, ...
		- 2 NF
			- must have 1 NF
			- no partial dependencies
				- removing values that only depends on one part of the composite key
		- 3 NF 
			- must have 2 NF
			- no transitive dependency
				- field/column that can be derived based on other fields

						
					SaleStaff
EmployeeId | SalePersonName | SalesOffice (street, city, state, zip) | Age | DOB | Customer1 | Customer2 | Customer3

TCL
	- Transaction Control Language
		- Transaction
			- consists in combining multiple database operations into one unit of work
			- PostgreSQL treats every SQL statement as being executed within a transaction unless specified otherwise
		- Relevant statements
			- begin
				- can indicate the start of a transaction
					- if begin is not used, one can be implicitely provided
				- start of transaction block
					- statement(s) to be executed as a unit of work
					- between begin and commit
			- savepoint
				- saves the state of the database at that point within the transaction
			- rollback [savepoint]
				- reverts the state of a database to a previous commit or savepoint
			- commit
				- saves/persists the changes to a database

	- https://www.postgresql.org/docs/10/tutorial-transactions.html

	- Properties of a transaction - ACID
		- Atomicity
			- one unit, transaction should be completed as a whole or not at all
		- Consistency
			- database should be in a valid state before/after the transaction
				- valid in regards to db constraint
				- valid in regards to business logic
		- Isolation
			- one transaction should not interfere with another transaction
			- results of transactions executing concurrently should be the same as if they occured in sequence
		- Durability
			- Commits are final, changes should be persisted to the database
	
	- Transaction Isolation Levels
		- Read uncommited
			- able to read/interact with uncommited data
		- Read commited
			- only able to interact with commited data
		- Repeatable read
			- only see data commited before the transaction began
		- Serializable
			- strictest level of isolation
			- transactions have to occur sequentially
	- Read phenomema
		- Dirty read (can arise from read uncommited isolation level)
			- transaction is able to read data written in a concurrent uncommited transaction
		- Non repeatable read
			- a transaction re-reads data it has previously read and finds that the data has been modified by another transaction
		- Phantom read
			- transaction re-execute a query and returns a set of row to find out that the set has been modified by another transaction

Friday

Design Pattern
	- Best practice to address a certain programming problem
	

Singleton DP
	- used to ensure that there is only one instance of a class
		- ie: used for heavy resources
	- enforced using several conditions
		- private constructor: prevent classes from creating an instance
		- private static instance of the singleton class: static, to enforce that there is only one since it's associated with the class
		- public static synchronized accessor method: used retrieve the singleton instance

Factory DP
	- used to create/return implementations of classes/interfaces
	- useful when the specific implementation does not matter
	- enforces abstraction

Set operations(union)
	- operations used to combine queries together
		- NOTE: different from joins which combine tables together
		- combine the rows of different result sets
	- union
		- combining select query results with no duplicates
	- union all
		- combining select query results with duplicates
			- faster because duplicates are not filtered out
	- intersect
		- returns only the common records from both data sets
	- except
		- returns a dataset where the second results are removed from the first

Index
	- providing a more efficient way to retrieve records in a database 
		- an index is generated on fields set as primary key
		- BTree
			- leverages binary tree
			- better for comparison operations
		- Hash
			- leverages hashing
			- better for equality
	- makes update/insert/delete operation may take longer due to updating the index

Views
	- views are unmaterialized "view" of a query
		- views are not "stored" in the db
	- helpful to keep nested queries neat and promoring reusability.