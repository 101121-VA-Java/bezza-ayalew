Tuesday

Resources:
	- https://www.w3schools.com/
	- https://developer.mozilla.org/en-US/docs/Web/HTML
	- RevPro

Optional VsCode add-on:
	- Live Server
		- allows for automatic refresh of HTML page in browser

HTML
	- Hypertext Mark-up Language
		- not a programming language
		- Mark-up language
	- Define the structure of a webpage using HTML tags
		- tags following a nested structure
		- structure of an HTML document
			- Doctype Declaration (optional as of html5)
				- tag that indicates the file is an HTML doc
			- html
				- head
					- metadata (information about the webpage)
				- body
					- information displayed on the webpage
	- Elements in HTML have attributes
		- these are used to provide more information regarding the tag
			- global attributes
				- present in all html tags
					- class, id, style
			- local attributes
				- present in certain tags
					- src, href
		- ie:
			<div id="div1">Hello World! By Kevin x2.</div>
			- div element with an attribute of id
	- Semantic elements
		- concept introduced in html5
		- provides more meanings to tags
			- helps with accessbility
		- names such as 
			- nav, main, section, footer, header.... instead of divs everywhere
	- Headers
		- h1 -> h6
			- biggest to smallest
	- Forms
		- tags that can be used to take user input and submit information
			- can submit information without js, just using attribute
				- method: specify the HTTP method
				- action: specify the url
	- self-closing tags
		- elements that do not require a closing tag
	- List
		- Ordered and unordered list
			- ol
				- ordered list
			- ul
				- unordered list
			- li
				- list items
	- Tables
		- nested in the table tag
			- tr to define a row
			- th/td to define a cell

CSS
	- Cascading style sheets
		- style is loaded from top to bottom
	- adds looks/style to HTML
		- HTML is the structure of a webpage, CSS is the styling
	- add CSS
		- inline
			- in the HTML tag via attribute
				- <div id="div1" style="color: cornflowerblue;"></div>
		- internally
			- in the HTML document, in the head tag
				- <style>
					selector {
						property: value;
					}
				  </style>
		- externally
			- from external stylesheets
				- best practice because can be reusable
			- <link rel="stylesheet" href="main.css">

	- Selectors
		- target specific elements to be styled
			- tag
			- class (.className)
			- id (#idName)
			- target elements more specifically: 
				- ie: nested elements...
				- https://www.w3schools.com/cssref/css_selectors.asp
		- styles apply based on specificity, most specific element will overrule
			- most to least: id > class > tag
	- CSS Box Model (common interview question)
		- Margin, Border, Padding, Content


Thursday

BootStrap
	- Library of classes that can be leveraged as premade templates
		- import bootstrap into HTML page
		- leverage classes to style elements
	- Responsive Web Design
		- websites and webpages that automatically adapt to different screen size/types
		- uses grid system to enable behavior

Mockito
	- Java Framework used alongside unit testing frameworks such as JUnit
	- Allows for mocking behavior
		- mocks objects to be used with Unit tests
			- ie: mocking dao layer so that database is not actually changed with every tests
	- @Mock
		- indicating to Mockito that a mock implementation is needed
	- @InjectMocks
		- specify an object that needs to have the mock implementation injected into it
			- replaces the actual implementation, ie: (EmployeePostgres)
	- when(mockObject.methodName(params)).thenReturn(returnValue);
	- @ExtendWith(MockitoExtension.class)
		- allows us to specify that we are running our unit tests with mockito

JavaScript
	- a scripting language that can be used for client-side web applications
		- can also be used server side
	- interpreted language
		- not a compiled language, no compilation step, interpreted by the browser
		- nowadays more modern browsers include JIT (just in time compilation)
	- supported by all modern web browsers
	- ECMA, manages the standard specification of JS
		- ECMAScript - standards
			- ES6, ES7... 
	- multi-paradigmed
		- mainly supports functional programming but can also mimick OOP
	- dynamically/weakly typed language
		- variables do not have to be declared with a specific type and can be changed dynamically
			- type coersion: 8 == '8' --> compares the value itself, return true
				- === to compare type and value
	- semi-colon injections
		- puts a semi-colon where it feels like it's appropriate implicitely.
			- can lead to issues
	- ways to include JS to an html page
		- internally, include between <script></script>
		- externally, <script src="path/to/file.js"></script>
			- best practice
	- Datatypes in JS
		- "primitives"
			- boolean
			- number
			- null
			- undefined
			- symbol -- we're not going to talk about symbol
			- string
		- "objects"
			- objects
				- stored as key-value pairs
				- similar to JSON
			- arrays
				- unlike Java, arrays are dynamically sized and can contain multiple datatypes
				- QC likes to ask about array methods
					- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
		- Truthy vs Falsy
			- any type in JS will valuate to either true or false
			- falsy values
				- null
				- underfined
				- 0
				- ''
				- false (the boolean)
				- NaN (not a number)
		- Functions
			- defined using the function keyword
				- function funcName(param1, param2){}
				- return a value, using the return keyword
			- additional types of functions
				- Function Expression/Anonymous Function
					- function declared without an explicit name, assigned to a variable instead
						- var someName = function (param1, param2){ return ...;}
				- Arrow function/notation
					- short hand syntax for writing functions
					- declaration, parameters, statements
						- var someName = param1, param2 => statements;
				- SelfInvoking Function(IIFE, immediately invoked function expression)
					- function invoked immediately after definition
						- (function() {//code})();
				- Callback function
					- functions passed in as an argument
					- help with asynchronous programming
					- 
					function funcOne(x) {//something with x}
					function funcThree(x) {//something else with x}

					function funcTwo(y, callback){
						callback(y);
					}
					
					funcTwo(6, funcOne);
					funcTwo(6, funcThree);
		- JavaScript scopes
			- where a declared variable is accessible
			- global
				- variable declared outside of the function scope
				- accessible anywhere within the script
			- function
				- variables declared within a function block
			- block
				- variables declared with a {} block
				- new to ES6
					- introced let and const to declare variables
						- let can be reassigned but not redeclared
						- const cannot be reassigned nor redeclared
		- Hoisting
			- variables declared var will be hoisted to the top of their scope
				- top of global/function scope
				- functions get hoisted
			- used before they are declared

		- 'use strict'
			- defined that the code should be executed in strict mode
				- can't use undeclared variables


Friday

DOM
	- Document Object Model
		- tree like representation of an HTML page using JS objects
			- each node of the tree represents a nested HTML element
	- Can traverse/navigate/retrieve elements from the DOM using js methods
		- document.getElementById
		- document.getElementsByClassName
		- document.getElementsByTagName
		- // can retrieve siblings, childs....
	- Can programmatically manipulate these elements using their properties
		- attributes
		- setAttributes
		- innerHTML
	- Can also create and append elements from JS
		- createElement("div") - creates an HTML element
		- appendElement("") - attach that element to the appropriate location in the DOM 

Template literal
	- declared between backticks: `` 
	- preservers new line
	- easier than concatenation
		- using concatenation: 'some string' + somevalue + '.'
		- using template literal: `some string ${somevalue}.`
			- to inject a value ${varName}

Event listeners
	- listeners that wait for certain events to happen to execute some functionality
		- onclick
		- onmousehover
		- onkeydown
		- ...
	- 1st step, retrieve element
	- assigning functionality
		- element.onclick = callback
		- element.addEventListener(event, callbackFunction, boolean)

Event propagation
	- how event listeners handle events for elements that have a parent/children with event listeners as well
	- 2 types
		- bubbling: default behavior - event bubbles up from the innermost child to the outermost parent
		- capturing: event starts from the outermost parent and moves down to the innermost child element
	- to specify behavior:
		- element.addEventListener(event, callbackFunction, boolean)
			- where boolean => true -> capturing
			- where boolean => false (or no argument) -> bubbling
	- to stop even propagation
		- event.stopProgation();

HTTP
	- HyperText Transfer Protocol
		- transfer protocol to exchange information over the web
	- Consists of requests and responses exchanged between a client and a server
	- information can be sent in many forms, plaintext, HTML, 
	- JSON (JavaScript Object Notation)
		- standard format for data transfer
		- allows information exchange between different applications(ie: different languages, frameworks...)
		
	- HTTP request
		- HTTP version: 1/1.1
		- Verb
			- HTTP methods: describes the operation requested by the HTTP request
			- 4 main ones
				- GET - retrieval operation (like select)
				- POST	- create operation (like insert)
				- PUT - update operation
				- DELETE - delete operation
		- URL
			- where the request is sent to/ resource location
		- Header
			- metadata about the request
		- Body
			- can be empty
			- can be used to include information
				- ie: information about a user to be created...
	- HTTP response
		- HTTP version
		- Header
		- Body
			- can be empty
			- can be used to return the information requested
		- Status code
			- information about the status of the request (100 - 500s)
				- 100 level: informational
				- 200 level: success
				- 300 level: redirect
				- 400 level: client error
				- 500 level: server error

AJAX
	- Asynchronous JS And XML
	- library that allows us to send HTTP requests and receive HTTP responses
		- allows for partial page reload
			- making async calls, code is still running while we wait for the HTTP response
	- 4 main Steps
		- create XMLHttpRequest object
		- setting a callback function to the ready state change of that object
		- parameterize / open the request object (set request information)
		- send the request
	- 5 ready states
		- 0: unsent - xhr object has beent created
		- 1: opened - .open() has been called
		- 2: headers received -- request has been sent, response headers have been received
		- 3: loading - body of the response is loading
		- 4: done - full response has been received and is ready for manipulation
	- onreadystate change callback function
		- checks that the ready state is 4 to make sure the the response was fully received
		- checks that the status code is 200 for success
		- define handling behavior for the response

Fetch API
	- an API in JS that allows us to send HTTP requests and receive HTTP responses
		- introduced in ES6
	- fetch(URL) - get
	- fetch(URL, {method: 'POST', body: JSON.stringify(JSObject)});
	- Can be used alongside async and await
		- introduced in ES7
		- async
			- used to specify a function that returns a promise or is making an asynchronous call
		- await
			- used in an async function to make an asynchronous call

S3 (AWS)
	- Simple Storage Service
		- Highly scalable
		- Highly durable and available
	- can programmatically access an s3 using the Amazon SDK
	- can host static webpages on S3
		- https://docs.aws.amazon.com/AmazonS3/latest/userguide/HostingWebsiteOnS3Setup.html































































