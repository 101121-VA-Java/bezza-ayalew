public static void main(String[] args) {					// A parameterized method of name "main" is declared with access modifier of "public", 
										the class scope specifier "static", and a return data type of "void" (no return). 
										A single parameter of name "args" is declared with data type of String array.
 
	String[] foodTypes = getFoodTypes();					// The non-parameterized method "getFoodTypes" is invoked and it returns array of meals.
										The returned value of (array of meals) is assigned to the String array type variable "foodTypes".
										
	String myType = foodTypes[2];						// The third element of the array of meals, "foodTypes" (i.e: "dinner") is assigned to the 
										String data type variable of "myType".

	String[] foodsOfMyType = getFoodsByType(myType);			// The parameterized method "getFoodsByType" is invoked with the value of the variable "myType"
										i.e. "dinner" as the argument. As described below where it is declared, this method returns
										an array of dinner food items. And this array is assigned to the String array 
										variable "foodsOfMyType".
	for (String food : foodsOfMyType) {					// A for-each loop is set with a String variable of "food" iterating over the elements 
										of the String array "foodOfMyType".					
		System.out.println(food);					// The system standar output is invoked to display the elements of the array in each iteration.
										printing the dinner food items: "curry", "stir fry", and "burger". 
	}
}

public static String[] getFoodTypes() {						// A non-parameterized method of name "getFoodTypes" is declared with access modifier of "public", 
										class scope specifier "static", and a return data type of String array.
	String[] foodTypes = {"breakfast","lunch","dinner","dessert","snack"};	// A string array is set and assigned to the variable "foodTypes" (of String array data type).
	return foodTypes;							// The variable "foodTypes" (the array of meals) is set to be the return value of the method.
}

public static String[] getFoodsByType(String type) {				// A parameterized method of name "getFoodsByType" is declared with access modifier of "public", 
										the class scope specifier "static", and a return data type of String array. A single parameter of 
										name "type" and data type String is declared.
	String[] foods = new String[3];						// An empty string array of 3 elements is instantiated and assigned to the String array variable "foods". 

	switch(type) {								// A control-flow statement of "switch" is set to test the value of the variable "type".
	case "breakfast":							// The value is checked if it is "breakfast", if true:
		foods[0] = "pancakes";						// The first index of the array foods will be assigned the value "pancakes".
		foods[1] = "cereal";						// The second index of the array foods will be assigned the value "cereal".
		foods[2] = "omelette";						// The first index of the array foods will be assigned the value "omlette".
		break;								// and the control-flow stops further testing.
	case "lunch":								// if the previous condition is not met, the value checking  
		foods[0] = "sandwich";						// and the assignment proceeds until a condition is met. When the method is called and "dinner" is passed
										as the argument, that case was true and the empty array of "foods" was filled with "curry", "stir fry" and 
										"burger" in that order.  
		foods[1] = "salad";
		foods[2] = "soup";
		break;
	case "dinner":
		foods[0] = "curry";
		foods[1] = "stir fry";
		foods[2] = "burger";
		break;
	case "dessert":
		foods[0] = "cake";
		foods[1] = "ice cream";
		foods[2] = "candy";
		break;
	case "snack":
		foods[0] = "chips";
		foods[1] = "apple";
		foods[2] = "samosa";
		break;
	default:								// If all cases above are not the case, the default is met and  
		// add your own							// Whatever statement is here will be executed and
		break;								// the control-flow stops
	}

	return foods;								// The return value of the method is set to the variable "foods".
}